[{
  "ifm":"JavaScript的原型本质上是一种托管机制.所有普通对象都有内置的Object.prototype,指向原型链的顶端(比如说全局作用域),如果在原型链中找不到指定的属性就会停止. toString(),valueOf()和其他一些通用的功能都存在于Object.prototype对象上,因此语言中所有的对象都可以使用它们.关联两个对象最常用的方法是使用new关键词进行函数调用,在调用的4个步骤(第二章)中去创建一个关联其他对象的新对象.使用new调用函数时会把新对象的.prototype属性关联到'其他对象'.带new的函数调用通常被称为'构造函数调用',尽管它们实际上和传统面向类语言中的类构造函数不一样.虽然这些JavaScript机制和传统面向类语言中的'类初始化'和'类继承'很相似,但是JavaScript中的机制有一个核心区别,那就是不会进行复制,对象之间是通过内部的[[prototype]]链关联的.出于各种原因,以'继承'结尾的术语(包括'原型继承')和其他面向对象的术语都无法帮助你理解JavaScript的真是机制(不仅仅是限制我们的思维模式).相比之下,'委托'是一个更合适的术语,因为对象之间的关系不是复制而是委托.(按引用地址传递.引用地址本身也可以理解为值.)"
}]